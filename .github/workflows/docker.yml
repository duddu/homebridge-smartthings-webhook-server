name: Build Docker image

run-name: ${{ github.event.client_payload.docker_run_name || false }}

on:
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [ docker-main ]
    
concurrency:
  group: docker-${{ github.event.client_payload.docker_ref_name || github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE: ghcr.io/${{ github.repository }}
  IMAGE_ARGS: |
    GIT_REF=${{ github.event.client_payload.docker_ref_name || github.ref_name }}
    GIT_SHA=${{ github.event.client_payload.docker_revision || github.sha }}
  IMAGE_CACHE_SRC: type=registry,ref=ghcr.io/${{ github.repository }}:latest-cache{0}

jobs:
  docker:
    name: Build${{ github.event_name == 'repository_dispatch' && ' and publish' || '' }} image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.client_payload.docker_revision || github.sha }}
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ github.event_name == 'repository_dispatch' }}
        id: qemu
      - name: Extract image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE }}
      - name: Reset npm package version for build cache
        run: npm version 0.0.0-dockerbuild --no-git-tag-version
      - name: Build${{ github.event_name == 'repository_dispatch' && ' and push' || '' }} image
        uses: docker/build-push-action@v5
        id: push
        with:
          context: .
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name == 'repository_dispatch' }}
          sbom: ${{ github.event_name == 'repository_dispatch' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.IMAGE }}:${{ github.event.client_payload.docker_ref_name || github.ref_name }}
            ${{ env.IMAGE }}:${{ github.event_name == 'repository_dispatch' && 'latest' || github.ref_name }}
          build-args: ${{ env.IMAGE_ARGS }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ github.event_name == 'repository_dispatch' && 'linux/arm64/v8,linux/amd64' || '' }}
          cache-from: |
            ${{ format(env.IMAGE_CACHE_SRC, '-arm64') }}
            ${{ format(env.IMAGE_CACHE_SRC, '-amd64') }}
      - name: Push arm64 image build cache
        uses: docker/build-push-action@v5
        if: ${{ github.event_name == 'repository_dispatch' }}
        with:
          context: .
          load: true
          build-args: ${{ env.IMAGE_ARGS }}
          platforms: linux/arm64/v8
          cache-from: ${{ format(env.IMAGE_CACHE_SRC, '-arm64') }}
          cache-to: ${{ format(env.IMAGE_CACHE_SRC, '-arm64,mode=max') }}
      - name: Push amd64 image build cache
        uses: docker/build-push-action@v5
        if: ${{ github.event_name == 'repository_dispatch' }}
        with:
          context: .
          load: true
          build-args: ${{ env.IMAGE_ARGS }}
          platforms: linux/amd64
          cache-from: ${{ format(env.IMAGE_CACHE_SRC, '-amd64') }}
          cache-to: ${{ format(env.IMAGE_CACHE_SRC, '-amd64,mode=max') }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: ${{ github.event_name == 'repository_dispatch' }}
        with:
          subject-name: ${{ env.IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Run deploy on Northflank workflow
        if: ${{ github.event_name == 'repository_dispatch' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/dispatches \
            -f "event_type=deploy-northflank" \
            -F "client_payload[deploy_revision]=${{ github.event.client_payload.docker_revision || github.sha }}" \
            -F "client_payload[deploy_run_name]=${{ github.event.client_payload.docker_run_name || github.event.pull_request.title }}"