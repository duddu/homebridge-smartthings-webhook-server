name: Build Docker image

run-name: ${{ github.event.client_payload.docker_run_name || false }}

on:
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [ docker-main ]
    
concurrency:
  group: docker-${{ github.event.client_payload.docker_ref_name || github.ref_name }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  DOCKER_PLATFORMS: ${{ github.event_name != 'pull_request' && 'linux/arm64/v8,linux/amd64' || '' }}

jobs:
  docker:
    name: Build${{ github.event_name != 'pull_request' && ' and publish' || '' }} image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.client_payload.docker_revision || github.sha }}
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.DOCKER_PLATFORMS }}
          buildkitd-config: 
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ github.event_name != 'pull_request' }}
        id: qemu
        with:
          platforms: ${{ env.DOCKER_PLATFORMS }}
      - name: Extract image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Build${{ github.event_name != 'pull_request' && ' and push' || '' }} image
        uses: docker/build-push-action@v5
        id: push
        env:
          CACHE_SRC: 'type=registry,ref=${{ env.DOCKER_IMAGE }}:latest-cache{0}'
        with:
          context: .
          target: production
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          sbom: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.DOCKER_IMAGE }}:${{ github.event.client_payload.docker_ref_type == 'tag' && 'main' || github.event_name == 'pull_request' && github.ref_name || 'latest' }}
          build-args: |
            GIT_REF=${{ github.event.client_payload.docker_ref_name || github.ref_name }}
            GIT_SHA=${{ github.event.client_payload.docker_revision || github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          cache-from: ${{ format(env.CACHE_SRC, '') }}
          cache-to: ${{ github.event_name != 'pull_request' && format(env.CACHE_SRC, ',mode=max') || '' }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          subject-name: ${{ env.DOCKER_IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Run deploy on Render workflow
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/dispatches \
            -f "event_type=deploy-render" \
            -F "client_payload[deploy_revision]=${{ github.event.client_payload.docker_revision || github.sha }}" \
            -F "client_payload[deploy_run_name]=${{ github.event.client_payload.docker_run_name || github.event.pull_request.title }}"