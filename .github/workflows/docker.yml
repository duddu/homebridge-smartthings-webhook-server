name: Publish Docker image

on:
  push:
    branches: [ main ]
    tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]

concurrency:
  group: publish-image

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    env:
      GIT_REV_SHORT:
      GIT_LATEST_TAG:
      NPM_DISPLAY_NAME:
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set environment variables
        run: |
          echo "GIT_REV_SHORT=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "GIT_LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> "$GITHUB_ENV"
          echo "NPM_DISPLAY_NAME=$(npm pkg get displayName | tr -d '"')" >> "$GITHUB_ENV"
      - name: Determine image tags
        id: determine-tags
        run: |
          git fetch origin 'refs/tags/*:refs/tags/*'
          TAGS="${{ env.DOCKER_IMAGE }}:latest"
          [[ ${{ github.ref_type }} == tag ]] && TAGS="$TAGS ${{ env.DOCKER_IMAGE }}:${{ env.GIT_LATEST_TAG }}"
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        id: qemu
        with:
          platforms: linux/arm64/v8,linux/amd64
      - name: Extract image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: push
        with:
          context: .
          push: true
          sbom: true
          target: production
          tags: ${{ steps.determine-tags.outputs.tags }}
          build-args: |
            GIT_LATEST_TAG=${{ env.GIT_LATEST_TAG }}
            GIT_REV_SHORT=${{ env.GIT_REV_SHORT }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ env.GIT_LATEST_TAG }}
            org.opencontainers.image.description="${{ env.NPM_DISPLAY_NAME }} (v${{ env.GIT_LATEST_TAG}} - ${{ env.GIT_REV_SHORT }})"
          annotations: |
            ${{ steps.meta.outputs.annotations }}
            org.opencontainers.image.version=${{ env.GIT_LATEST_TAG }}
            org.opencontainers.image.description="${{ env.NPM_DISPLAY_NAME }} (v${{ env.GIT_LATEST_TAG}} - ${{ env.GIT_REV_SHORT }})"
          platforms: linux/arm64/v8,linux/amd64
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest-cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest-cache,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.DOCKER_IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Run deploy on Render workflow
        env:
          GH_TOKEN: ${{ github.token }}
          GIT_COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/dispatches \
            -f "event_type=deploy-render" \
            -F "client_payload[git_commit_msg]=$GIT_COMMIT_MSG" \
            -F "client_payload[git_rev_short]=$GIT_REV_SHORT"