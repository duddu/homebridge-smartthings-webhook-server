name: Publish Docker image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ released ]
    
concurrency:
  group: docker-${{ github.ref_name }}

env:
  IS_ON_TAG: ${{ github.ref_type == 'tag' }}
  IS_ON_PR: ${{ github.event_name == 'pull_request' }}
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  DOCKER_PLATFORMS: linux/arm64/v8,linux/amd64

jobs:
  build-and-push-image:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        id: qemu
        with:
          platforms: ${{ env.DOCKER_PLATFORMS }}
      - name: Extract image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: push
        env:
          CACHE_FROM: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest-cache
          CACHE_TO: '${{ env.CACHE_FROM }},mode=max'
        with:
          context: .
          target: production
          load: ${{ env.IS_ON_PR }}
          push: ${{ !env.IS_ON_PR }}
          sbom: ${{ !env.IS_ON_PR }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.DOCKER_IMAGE }}:${{ env.IS_ON_TAG && 'main' || 'latest' }}
          build-args: |
            GIT_REF=${{ github.ref_name }}
            GIT_SHA=${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          cache-from: ${{ env.CACHE_FROM }}
          cache-to: ${{ !env.IS_ON_PR && env.CACHE_TO }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: ${{ !env.IS_ON_PR }}
        with:
          subject-name: ${{ env.DOCKER_IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Run deploy on Render workflow
        if: ${{ !env.IS_ON_PR }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/dispatches \
            -f "event_type=deploy-render" \
            -F "client_payload[deploy_revision]=${{ github.sha }}" \
            -F "client_payload[deploy_run_name]=${{ env.IS_ON_TAG && github.event.release.tag_name || github.event.head_commit.message }}"