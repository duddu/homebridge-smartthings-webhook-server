name: Publish Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push image
    runs-on: ubuntu-latest
    concurrency:
      group: release
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      GIT_REVISION:
      NPM_VERSION:
      NPM_DISPLAY_NAME:
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true
      - name: Set npm environment variables
        shell: bash
        run: |
          echo "GIT_REVISION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "NPM_VERSION=$(npm pkg get version | tr -d '"')" >> $GITHUB_ENV
          echo "NPM_DISPLAY_NAME=$(npm pkg get displayName | tr -d '"')" >> $GITHUB_ENV
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: push
        with:
          context: .
          push: true
          target: production
          build-args: |
            NPM_VERSION=${{ env.NPM_VERSION }}
            GIT_REVISION=${{ env.GIT_REVISION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.version=${{ env.NPM_VERSION }}
            org.opencontainers.image.description=${{ env.NPM_DISPLAY_NAME }}
            ${{ steps.meta.outputs.labels }}
          annotations: |
            org.opencontainers.image.version=${{ env.NPM_VERSION }}
            org.opencontainers.image.description=${{ env.NPM_DISPLAY_NAME }}
            ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cache,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true